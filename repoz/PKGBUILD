# Maintainer: David Macek <david.macek.0@gmail.com>

_realname=repoz
_choconame=repoz
pkgbase="app-${_realname}"
pkgname=("app-i686-${_realname}")
epoch=1
pkgver=5.5
pkgrel=2
pkgdesc="A zero-conf git repository hub"
url="https://github.com/awaescher/RepoZ"
arch=('any')
license=('MIT')
makedepends=("p7zip" "mingw-w64-x86_64-jq")
provides=("${pkgbase}")
options=(!strip)
source=("RepoZ.Setup.exe::https://github.com/awaescher/RepoZ/releases/download/v${pkgver}/RepoZ.${pkgver}.Setup.exe")
sha512sums=('9cdec304da164f3ec042be8641ed20e69524bda45622b93331db1cafa993ead72f776b5c246ddfa9d22c3d83ec069d5c477651a6247992726de523e02b86ea9b')
noextract=("RepoZ.Setup.exe")

_dotnet() {
    local runtimetarget="$(cat "${1}.deps.json" | /mingw64/bin/jq -r '.runtimeTarget.name')"
    local netcore="$(cat "${1}.deps.json" | /mingw64/bin/jq --arg runtimetarget "${runtimetarget}" -r '.targets[$runtimetarget] | keys | .[] | select(test("^runtimepack[.]Microsoft[.]NETCore[.]App[.][Rr]untime[.]win-x64/"))')"
    local windowsdesktop="$(cat "${1}.deps.json" | /mingw64/bin/jq --arg runtimetarget "${runtimetarget}" -r '.targets[$runtimetarget] | keys | .[] | select(test("^runtimepack[.]Microsoft[.]WindowsDesktop[.]App[.][Rr]untime[.]win-x64/"))')"

    cat "${1}.deps.json" | /mingw64/bin/jq -r --arg runtimetarget "${runtimetarget}" --arg netcore "${netcore}" --arg windowsdesktop "${windowsdesktop}" '.targets[$runtimetarget] | (.[$netcore], .[$windowsdesktop]) | (.runtime, .native) | select(.) | keys | .[]' | dos2unix | sort | uniq | (cd "$(dirname "${1}")" && xargs rm -f)

    cat "${1}.deps.json" | /mingw64/bin/jq -r --arg runtimetarget "${runtimetarget}" --arg netcore "${netcore}" --arg windowsdesktop "${windowsdesktop}" 'del(.targets[$runtimetarget][$netcore]) | del(.targets[$runtimetarget][$windowsdesktop])' > "${1}.deps.json.tmp"
    mv -f "${1}.deps.json.tmp" "${1}.deps.json"

    cat "${1}.runtimeconfig.json" | /mingw64/bin/jq '.runtimeOptions |= (.framework = .includedFrameworks[-1] | del(.includedFrameworks))' > "${1}.runtimeconfig.json.tmp"
    mv -f "${1}.runtimeconfig.json.tmp" "${1}.runtimeconfig.json"
}

_rmmsdll() {
    local ms

    ms=("msvbvm[0-9]+"
        "ucrtbase"
        "mfcm?[0-9]+[a-z]+"
        "msvc[rp][0-9]+(_([0-9]|codecvt_ids|atomic_wait))?"
        "vc([ao]mp|corlib|runtime)[0-9]+(_([0-9]|threads))?"
        "concrt[0-9]+"
        "pgort[0-9]+"
        "api-ms-win-[0-9a-z-]+")
    find "${1}" -iname '*.dll' | grep -Eif <(for m in "${ms[@]}"; do echo "/${m}[.]dll$"; done) | xargs -r rm
}

prepare() {
    7z x -y -bd "RepoZ.Setup.exe" -o"RepoZ.Setup.exe.dir" > /dev/null
}

package() {
    local a="${pkgdir}/apps/${_realname}"
    mkdir -p "${a}"
    cp -R "RepoZ.Setup.exe.dir"/* "${a}"
    rm -R "${a}"/'$PLUGINSDIR' "${a}/Uninstall.exe"
    find "${a}/lib" -mindepth 1 -maxdepth 1 -not -name "win32" -exec rm -R {} ';'
    _dotnet "${a}/grr"
    _dotnet "${a}/grrui"
    _rmmsdll "${a}"
}
