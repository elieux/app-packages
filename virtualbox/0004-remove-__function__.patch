__FUNCTION__ is a MSVC-only feature.

--- a/src/VBox/HostDrivers/win/cfg/VBoxDrvCfg.cpp	2023-02-03 12:47:55.286821400 +0100
+++ b/src/VBox/HostDrivers/win/cfg/VBoxDrvCfg.cpp	2023-02-03 13:42:32.817229400 +0100
@@ -237,7 +237,7 @@
     if (!SetupFindFirstLineW(hInf, pwszSection, pwszKey, pCtx))
     {
         DWORD dwErr = GetLastError();
-        NonStandardLogRelCrap((__FUNCTION__ ": SetupFindFirstLine failed WinEr (%Rwc) for Section(%ls), Key(%ls)\n",
+        NonStandardLogRelCrap(("vboxDrvCfgInfQueryContext: SetupFindFirstLine failed WinEr (%Rwc) for Section(%ls), Key(%ls)\n",
                                dwErr, pwszSection, pwszKey));
         return HRESULT_FROM_WIN32(dwErr);
     }
@@ -257,7 +257,7 @@
 //        NonStandardAssert(dwErr == ERROR_INSUFFICIENT_BUFFER);
         if (dwErr != ERROR_INSUFFICIENT_BUFFER)
         {
-            NonStandardLogFlowCrap((__FUNCTION__ ": SetupGetStringField failed WinEr (%Rwc) for iValue(%d)\n", dwErr, iValue));
+            NonStandardLogFlowCrap(("vboxDrvCfgInfQueryKeyValue: SetupGetStringField failed WinEr (%Rwc) for iValue(%d)\n", dwErr, iValue));
             return HRESULT_FROM_WIN32(dwErr);
         }
     }
@@ -266,7 +266,7 @@
     NonStandardAssert(pwszValue);
     if (!pwszValue)
     {
-        NonStandardLogRelCrap((__FUNCTION__ ": SetCoTaskMemAlloc failed to alloc mem of size (%d), for iValue(%d)\n",
+        NonStandardLogRelCrap(("vboxDrvCfgInfQueryKeyValue: SetCoTaskMemAlloc failed to alloc mem of size (%d), for iValue(%d)\n",
                                cwcValue * sizeof(pwszValue[0]), iValue));
         return E_FAIL;
     }
@@ -274,7 +274,7 @@
     if (!SetupGetStringFieldW(pCtx, iValue, pwszValue, cwcValue, &cwcValue))
     {
         DWORD dwErr = GetLastError();
-        NonStandardLogRelCrap((__FUNCTION__ ": SetupGetStringField failed WinEr (%Rwc) for iValue(%d)\n", dwErr, iValue));
+        NonStandardLogRelCrap(("vboxDrvCfgInfQueryKeyValue: SetupGetStringField failed WinEr (%Rwc) for iValue(%d)\n", dwErr, iValue));
         NonStandardAssertFailed();
         RTMemFree(pwszValue);
         return HRESULT_FROM_WIN32(dwErr);
@@ -302,7 +302,7 @@
     HRESULT hrc = vboxDrvCfgInfQueryContext(hInf, L"Manufacturer", NULL, &InfCtx);
     if (hrc != S_OK)
     {
-        NonStandardLogCrap((__FUNCTION__ ": vboxDrvCfgInfQueryContext for Manufacturer failed, hrc=0x%x\n", hrc));
+        NonStandardLogCrap(("vboxDrvCfgInfQueryModelsSectionName: vboxDrvCfgInfQueryContext for Manufacturer failed, hrc=0x%x\n", hrc));
         return hrc;
     }
 
@@ -311,7 +311,7 @@
     hrc = vboxDrvCfgInfQueryKeyValue(&InfCtx, 1, &pwszModels, &cwcModels);
     if (hrc != S_OK)
     {
-        NonStandardLogRelCrap((__FUNCTION__ ": vboxDrvCfgRegQueryKeyValue 1 for Manufacturer failed, hrc=0x%x\n", hrc));
+        NonStandardLogRelCrap(("vboxDrvCfgInfQueryModelsSectionName: vboxDrvCfgRegQueryKeyValue 1 for Manufacturer failed, hrc=0x%x\n", hrc));
         return hrc;
     }
 
@@ -389,10 +389,10 @@
 
     LPWSTR pwszModels;
     HRESULT hrc = vboxDrvCfgInfQueryModelsSectionName(hInf, &pwszModels, NULL);
-    NonStandardLogRelCrap((__FUNCTION__ ": vboxDrvCfgInfQueryModelsSectionName returned pwszModels = (%ls)", pwszModels));
+    NonStandardLogRelCrap(("vboxDrvCfgInfQueryFirstPnPId: vboxDrvCfgInfQueryModelsSectionName returned pwszModels = (%ls)", pwszModels));
     if (hrc != S_OK)
     {
-        NonStandardLogCrap((__FUNCTION__ ": vboxDrvCfgRegQueryKeyValue for Manufacturer failed, hrc=0x%x\n", hrc));
+        NonStandardLogCrap(("vboxDrvCfgInfQueryFirstPnPId: vboxDrvCfgRegQueryKeyValue for Manufacturer failed, hrc=0x%x\n", hrc));
         return hrc;
     }
 
@@ -404,14 +404,14 @@
         hrc = vboxDrvCfgInfQueryKeyValue(&InfCtx, 2, &pwszPnPId, NULL);
         if (hrc == S_OK)
         {
-            NonStandardLogRelCrap((__FUNCTION__ ": vboxDrvCfgRegQueryKeyValue for models (%ls) returned pwszPnPId (%ls)\n", pwszModels, pwszPnPId));
+            NonStandardLogRelCrap(("vboxDrvCfgInfQueryFirstPnPId: vboxDrvCfgRegQueryKeyValue for models (%ls) returned pwszPnPId (%ls)\n", pwszModels, pwszPnPId));
             *ppwszPnPId = pwszPnPId;
         }
         else
-            NonStandardLogRelCrap((__FUNCTION__ ": vboxDrvCfgRegQueryKeyValue for models (%ls) failed, hrc=0x%x\n", pwszModels, hrc));
+            NonStandardLogRelCrap(("vboxDrvCfgInfQueryFirstPnPId: vboxDrvCfgRegQueryKeyValue for models (%ls) failed, hrc=0x%x\n", pwszModels, hrc));
     }
     else
-        NonStandardLogRelCrap((__FUNCTION__ ": vboxDrvCfgInfQueryContext for models (%ls) failed, hrc=0x%x\n", pwszModels, hrc));
+        NonStandardLogRelCrap(("vboxDrvCfgInfQueryFirstPnPId: vboxDrvCfgInfQueryContext for models (%ls) failed, hrc=0x%x\n", pwszModels, hrc));
 
     RTMemFree(pwszModels);
     return hrc;
@@ -420,24 +420,24 @@
 static bool vboxDrvCfgInfEnumerationCallback(LPCWSTR pwszFileName, PVOID pCtxt)
 {
     PINFENUM_CONTEXT_T pContext = (PINFENUM_CONTEXT_T)pCtxt;
-    NonStandardLogRelCrap((__FUNCTION__": pwszFileName (%ls)\n", pwszFileName));
-    NonStandardLogRelCrap((__FUNCTION__ ": pContext->InfInfo.pwszClassName = (%ls)\n", pContext->InfInfo.pwszClassName));
+    NonStandardLogRelCrap(("vboxDrvCfgInfEnumerationCallback: pwszFileName (%ls)\n", pwszFileName));
+    NonStandardLogRelCrap(("vboxDrvCfgInfEnumerationCallback: pContext->InfInfo.pwszClassName = (%ls)\n", pContext->InfInfo.pwszClassName));
     HINF hInf = SetupOpenInfFileW(pwszFileName, pContext->InfInfo.pwszClassName, INF_STYLE_WIN4, NULL /*__in PUINT ErrorLine */);
     if (hInf == INVALID_HANDLE_VALUE)
     {
         DWORD const dwErr = GetLastError();
 //        NonStandardAssert(dwErr == ERROR_CLASS_MISMATCH);
         if (dwErr != ERROR_CLASS_MISMATCH)
-            NonStandardLogCrap((__FUNCTION__ ": SetupOpenInfFileW err dwErr=%u\n", dwErr));
+            NonStandardLogCrap(("vboxDrvCfgInfEnumerationCallback: SetupOpenInfFileW err dwErr=%u\n", dwErr));
         else
-            NonStandardLogCrap((__FUNCTION__ ": dwErr == ERROR_CLASS_MISMATCH\n"));
+            NonStandardLogCrap(("vboxDrvCfgInfEnumerationCallback: dwErr == ERROR_CLASS_MISMATCH\n"));
         return true;
     }
 
     LPWSTR pwszPnPId;
     HRESULT hrc = vboxDrvCfgInfQueryFirstPnPId(hInf, &pwszPnPId);
-    NonStandardLogRelCrap((__FUNCTION__ ": vboxDrvCfgInfQueryFirstPnPId returned pwszPnPId = (%ls)\n", pwszPnPId));
-    NonStandardLogRelCrap((__FUNCTION__ ": pContext->InfInfo.pwszPnPId = (%ls)\n", pContext->InfInfo.pwszPnPId));
+    NonStandardLogRelCrap(("vboxDrvCfgInfEnumerationCallback: vboxDrvCfgInfQueryFirstPnPId returned pwszPnPId = (%ls)\n", pwszPnPId));
+    NonStandardLogRelCrap(("vboxDrvCfgInfEnumerationCallback: pContext->InfInfo.pwszPnPId = (%ls)\n", pContext->InfInfo.pwszPnPId));
     if (hrc == S_OK)
     {
         if (!RTUtf16ICmp(pContext->InfInfo.pwszPnPId, pwszPnPId))
@@ -530,14 +530,14 @@
             }
             __except(hrc = GetExceptionCode(), EXCEPTION_EXECUTE_HANDLER)
             {
-                NonStandardLogRelCrap((__FUNCTION__ ": SetupUninstallOEMInf raised an exception: %#x\n", hrc));
+                NonStandardLogRelCrap(("vboxDrvCfgInfEnumerationCallback: SetupUninstallOEMInf raised an exception: %#x\n", hrc));
                 hrc = E_ABORT;
             }
             if (!fRc)
 #endif
             {
                 DWORD const dwErr = GetLastError();
-                NonStandardLogRelCrap((__FUNCTION__ ": SetupUninstallOEMInf failed for file (%ls), dwErr=%u\n", pwszFileName, dwErr));
+                NonStandardLogRelCrap(("vboxDrvCfgInfEnumerationCallback: SetupUninstallOEMInf failed for file (%ls), dwErr=%u\n", pwszFileName, dwErr));
                 NonStandardAssertFailed();
                 hrc = HRESULT_FROM_WIN32( dwErr );
             }
@@ -546,7 +546,7 @@
         RTMemFree(pwszPnPId);
     }
     else
-        NonStandardLogCrap((__FUNCTION__ ": vboxDrvCfgInfQueryFirstPnPId failed, hrc=0x%x\n", hrc));
+        NonStandardLogCrap(("vboxDrvCfgInfEnumerationCallback: vboxDrvCfgInfQueryFirstPnPId failed, hrc=0x%x\n", hrc));
 
     SetupCloseInfFile(hInf);
     return true;
@@ -574,7 +574,7 @@
         DWORD const dwErr = GetLastError();
         HRESULT hrc = HRESULT_FROM_WIN32(dwErr);
         if (fCopyStyle != SP_COPY_REPLACEONLY || hrc != VBOXDRVCFG_S_INFEXISTS)
-            NonStandardLogRelCrap((__FUNCTION__ ": SetupCopyOEMInf fail dwErr=%u\n", dwErr));
+            NonStandardLogRelCrap(("vboxDrvCfgInfCopyEx: SetupCopyOEMInf fail dwErr=%u\n", dwErr));
         return hrc;
     }
 
@@ -597,7 +597,7 @@
         if (!SetupUninstallOEMInfW(wszDstInfName, fFlags, NULL /*Reserved*/))
         {
             DWORD dwErr = GetLastError();
-            NonStandardLogRelCrap((__FUNCTION__ ": SetupUninstallOEMInf failed for file (%ls), oem(%ls), dwErr=%u\n",
+            NonStandardLogRelCrap(("VBoxDrvCfgInfUninstall: SetupUninstallOEMInf failed for file (%ls), oem(%ls), dwErr=%u\n",
                                    pwszInfPath, wszDstInfName, dwErr));
             NonStandardAssertFailed();
             return HRESULT_FROM_WIN32(dwErr);
@@ -661,7 +661,7 @@
         }
         __except(uXcpt = GetExceptionCode(), EXCEPTION_EXECUTE_HANDLER)
         {
-            NonStandardLogRelCrap((__FUNCTION__ ": SetupDiBuildDriverInfoList raised an exception: %#x\n", uXcpt));
+            NonStandardLogRelCrap(("vboxDrvCfgCollectInfsSetupDi: SetupDiBuildDriverInfoList raised an exception: %#x\n", uXcpt));
         }
         if (fRc)
 #endif
@@ -699,7 +699,7 @@
                                 if (DrvDetail.s.InfFileName[0])
                                 {
                                     HRESULT hrc = a_rList.add(DrvDetail.s.InfFileName);
-                                    NonStandardLogRelCrap((__FUNCTION__": %ls added to list (%#x)", DrvDetail.s.InfFileName, hrc));
+                                    NonStandardLogRelCrap((": %ls added to list (%#x)", DrvDetail.s.InfFileName, hrc));
                                     if (hrc != S_OK)
                                     {
                                         dwErrRet = ERROR_OUTOFMEMORY;
@@ -712,7 +712,7 @@
                     else
                     {
                         DWORD dwErr2 = GetLastError();
-                        NonStandardLogRelCrap((__FUNCTION__": SetupDiGetDriverInfoDetail fail dwErr=%u, size(%d)", dwErr2, dwReq));
+                        NonStandardLogRelCrap(("vboxDrvCfgCollectInfsSetupDi: SetupDiGetDriverInfoDetail fail dwErr=%u, size(%d)", dwErr2, dwReq));
 //                        NonStandardAssertFailed();
                     }
                 }
@@ -721,7 +721,7 @@
                     DWORD dwErr2 = GetLastError();
                     if (dwErr2 == ERROR_NO_MORE_ITEMS)
                     {
-                        NonStandardLogRelCrap((__FUNCTION__": dwErr == ERROR_NO_MORE_ITEMS -> search was finished "));
+                        NonStandardLogRelCrap(("vboxDrvCfgCollectInfsSetupDi: dwErr == ERROR_NO_MORE_ITEMS -> search was finished "));
                         break;
                     }
                     NonStandardAssertFailed();
@@ -771,7 +771,7 @@
 {
     VBoxDrvCfgStringList list(128);
     HRESULT hrc = vboxDrvCfgCollectInfsSetupDi(pGuidClass, pwszPnPId, list);
-    NonStandardLogRelCrap((__FUNCTION__": vboxDrvCfgCollectInfsSetupDi returned %d devices with PnPId %ls and class name %ls",
+    NonStandardLogRelCrap(("VBoxDrvCfgInfUninstallAllSetupDi: vboxDrvCfgCollectInfsSetupDi returned %d devices with PnPId %ls and class name %ls",
                            list.size(), pwszPnPId, pwszClassName));
     if (hrc == S_OK)
     {
@@ -791,7 +791,7 @@
                 offFilename--;
 
             vboxDrvCfgInfEnumerationCallback(&pwszInf[offFilename], &Context);
-            NonStandardLogRelCrap((__FUNCTION__": inf = %ls\n", pwszInf));
+            NonStandardLogRelCrap(("VBoxDrvCfgInfUninstallAllSetupDi: inf = %ls\n", pwszInf));
         }
     }
     return hrc;
@@ -819,7 +819,7 @@
                 DWORD dwErr = GetLastError();
                 if (dwErr != ERROR_NO_MORE_FILES)
                 {
-                    NonStandardLogRelCrap((__FUNCTION__": FindNextFile fail dwErr=%u\n", dwErr));
+                    NonStandardLogRelCrap(("vboxDrvCfgEnumFiles: FindNextFile fail dwErr=%u\n", dwErr));
                     NonStandardAssertFailed();
                     hrc = HRESULT_FROM_WIN32(dwErr);
                 }
@@ -834,7 +834,7 @@
         DWORD dwErr = GetLastError();
         if (dwErr != ERROR_NO_MORE_FILES)
         {
-            NonStandardLogRelCrap((__FUNCTION__": FindFirstFile fail dwErr=%u\n", dwErr));
+            NonStandardLogRelCrap(("vboxDrvCfgEnumFiles: FindFirstFile fail dwErr=%u\n", dwErr));
             NonStandardAssertFailed();
             hrc = HRESULT_FROM_WIN32(dwErr);
         }
@@ -860,17 +860,17 @@
         Context.InfInfo.pwszPnPId = pwszPnPId;
         Context.fFlags = fFlags;
         Context.hrc = S_OK;
-        NonStandardLogRelCrap((__FUNCTION__": Calling vboxDrvCfgEnumFiles(wszInfDirPath, vboxDrvCfgInfEnumerationCallback, &Context)"));
+        NonStandardLogRelCrap(("VBoxDrvCfgInfUninstallAllF: Calling vboxDrvCfgEnumFiles(wszInfDirPath, vboxDrvCfgInfEnumerationCallback, &Context)"));
         hrc = vboxDrvCfgEnumFiles(wszInfDirPath, vboxDrvCfgInfEnumerationCallback, &Context);
         NonStandardAssert(hrc == S_OK);
         if (hrc == S_OK)
             hrc = Context.hrc;
         else
-            NonStandardLogRelCrap((__FUNCTION__": vboxDrvCfgEnumFiles failed, hrc=0x%x\n", hrc));
+            NonStandardLogRelCrap(("VBoxDrvCfgInfUninstallAllF: vboxDrvCfgEnumFiles failed, hrc=0x%x\n", hrc));
     }
     else
     {
-        NonStandardLogRelCrap((__FUNCTION__": GetSystemWindowsDirectory failed, cwcWindows=%u lasterr=%u\n", cwcWindows, GetLastError()));
+        NonStandardLogRelCrap(("VBoxDrvCfgInfUninstallAllF: GetSystemWindowsDirectory failed, cwcWindows=%u lasterr=%u\n", cwcWindows, GetLastError()));
         NonStandardAssertFailed();
         hrc = E_FAIL;
     }
@@ -893,7 +893,7 @@
     if (hMgr == NULL)
     {
         DWORD dwErr = GetLastError();
-        NonStandardLogRelCrap((__FUNCTION__": OpenSCManager failed, dwErr=%u\n", dwErr));
+        NonStandardLogRelCrap(("VBoxDrvCfgSvcStart: OpenSCManager failed, dwErr=%u\n", dwErr));
         return HRESULT_FROM_WIN32(dwErr);
     }
 
@@ -913,7 +913,7 @@
                 if (!fRc)
                 {
                     DWORD dwErr = GetLastError();
-                    NonStandardLogRelCrap((__FUNCTION__": StartService failed dwErr=%u\n", dwErr));
+                    NonStandardLogRelCrap(("VBoxDrvCfgSvcStart: StartService failed dwErr=%u\n", dwErr));
                     hrc = HRESULT_FROM_WIN32(dwErr);
                 }
             }
@@ -931,7 +931,7 @@
                             if (!fRc)
                             {
                                 DWORD dwErr = GetLastError();
-                                NonStandardLogRelCrap((__FUNCTION__": QueryServiceStatus failed dwErr=%u\n", dwErr));
+                                NonStandardLogRelCrap(("VBoxDrvCfgSvcStart: QueryServiceStatus failed dwErr=%u\n", dwErr));
                                 hrc = HRESULT_FROM_WIN32(dwErr);
                                 break;
                             }
@@ -941,14 +941,14 @@
 
                     if (hrc != S_OK || Status.dwCurrentState != SERVICE_RUNNING)
                     {
-                        NonStandardLogRelCrap((__FUNCTION__": Failed to start the service\n"));
+                        NonStandardLogRelCrap(("VBoxDrvCfgSvcStart: Failed to start the service\n"));
                         hrc = E_FAIL;
                     }
                 }
                 else
                 {
                     DWORD dwErr = GetLastError();
-                    NonStandardLogRelCrap((__FUNCTION__": QueryServiceStatus failed dwErr=%u\n", dwErr));
+                    NonStandardLogRelCrap(("VBoxDrvCfgSvcStart: QueryServiceStatus failed dwErr=%u\n", dwErr));
                     hrc = HRESULT_FROM_WIN32(dwErr);
                 }
             }
@@ -956,7 +956,7 @@
         else
         {
             DWORD dwErr = GetLastError();
-            NonStandardLogRelCrap((__FUNCTION__": QueryServiceStatus failed dwErr=%u\n", dwErr));
+            NonStandardLogRelCrap(("VBoxDrvCfgSvcStart: QueryServiceStatus failed dwErr=%u\n", dwErr));
             hrc = HRESULT_FROM_WIN32(dwErr);
         }
 
@@ -965,7 +965,7 @@
     else
     {
         DWORD dwErr = GetLastError();
-        NonStandardLogRelCrap((__FUNCTION__": OpenServiceW failed, dwErr=%u\n", dwErr));
+        NonStandardLogRelCrap(("VBoxDrvCfgSvcStart: OpenServiceW failed, dwErr=%u\n", dwErr));
         hrc = HRESULT_FROM_WIN32(dwErr);
     }
 
